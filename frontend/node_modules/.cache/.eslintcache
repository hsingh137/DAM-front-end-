[{"C:\\Users\\tecti\\Desktop\\front end\\test\\frontend\\src\\index.js":"1","C:\\Users\\tecti\\Desktop\\front end\\test\\frontend\\src\\App.js":"2","C:\\Users\\tecti\\Desktop\\front end\\test\\frontend\\src\\reportWebVitals.js":"3"},{"size":1226,"mtime":1615478884206,"results":"4","hashOfConfig":"5"},{"size":15425,"mtime":1615582413669,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1615400145577,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"q7cyy6",{"filePath":"11","messages":"12","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"C:\\Users\\tecti\\Desktop\\front end\\test\\frontend\\src\\index.js",[],["16","17"],"C:\\Users\\tecti\\Desktop\\front end\\test\\frontend\\src\\App.js",["18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35"],"import React, { Component , useState } from 'react';\nimport './App.css';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport Modal from 'react-bootstrap/Modal';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Card from 'react-bootstrap/Card';\nimport CardGroup from 'react-bootstrap/CardGroup';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport { ControlLabel } from 'react-bootstrap';\nimport Select from 'react-select';\nimport makeAnimated from 'react-select/animated';\n\nclass MasterForm extends React.Component {\n\n  componentDidMount() {\n    this.props.hideLoader();\n  }\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n      currentStep: 1,\n      formData:{\n      name:  '',\n      calories: '14000',\n      protein: '280', \n      fats: '180', \n      carbs: '400',\n      allergens : [],\n      tags : []\n      },\n      result: {cost : ''  , recipes : [ ] ,\n    ingreds : [ ]\n\n       }};\n\n  }\n\n\n\n\n  // handle the lsit input \n\n  handlelist = (e) => {\n    var emp_list ;\n   emp_list = []\n   let currentStep = this.state.currentStep;\n    var a;\n    for(a in e) {\n      emp_list.push(e[a]['value']);\n    }\n    if (currentStep  == 4){\n      this.state.formData.allergens  = emp_list\n    }else if(currentStep  == 5){\n      this.state.formData.tags  = emp_list\n    }\n    \n  }\n\n  handleChange = (event) => {\n    const value = event.target.value;\n    const name = event.target.name;\n    let target = event.target;\n    var formData = this.state.formData;\n    formData[name] = value;\n    this.setState({\n      formData\n    });\n  }\n\nhandleResponse = (r) =>{\n  \n  var res;\n  res = r.result[0]\n// turn recipes into list of lists \n  var result = this.state.result;\n  result['cost'] = res['Total cost'] ; \n  result['recipes'] = res['recipes'] ; \n  result['ingreds'] = res['ingreds'] ; \n  this.setState({\n      result,\n    isLoading: false\n  });\n  console.log(this.state.result['recipes'])\n\n  \n}\n\n\n\n//show resutls\n\n\nshowResults() {\n  let list1 = this.state.result.recipes.slice(0,3);\n  console.log(list1)\n  let list2 = this.state.result.recipes.slice(3,6);\n  let list3 = this.state.result.recipes.slice(6,9);\n  return (\n    <div className = \"content\">\n    <center> <h3>Total Cost: {this.state.result.cost}</h3> </center>  \n\n    <center> <h3>View Recipes Here</h3> </center>  \n    <Row>\n    <br></br>\n    <CardDeck>\n        {list1.map((value, index) => {\n          return( \n            <Card bg=\"lecondary\"  key={index}  text='dark'>\n              <Card.Header>Recipe {index + 1}</Card.Header>\n            <Card.Body>\n              \n              <Card.Text>\n              <Card.Title>{value['Name']}</Card.Title>\n    \n                <ListGroup variant=\"flush\">\n                  <ListGroup.Item> Calories: {value['calories']} </ListGroup.Item>\n                  <ListGroup.Item> Protein: {value['Protein']} </ListGroup.Item>\n                  <ListGroup.Item> Fats: {value['fat']} </ListGroup.Item>\n                  <ListGroup.Item> Carbohydrates: {value['Carbohydrate']} </ListGroup.Item>\n                </ListGroup>\n\n              </Card.Text>\n            </Card.Body>\n          </Card>\n          )\n        })}\n  </CardDeck>\n</Row>\n<br></br>\n<Row>\n<CardDeck>\n        {list2.map((value, index) => {\n          return( \n            <Card bg=\"ligasht\"  key={index}  text='Dark'>\n            <Card.Header>Recipe {index+4}</Card.Header>\n          <Card.Body>\n            \n            <Card.Text>\n            <Card.Title>{value['Name']}</Card.Title>\n            <ListGroup variant=\"flush\">\n\n                <ListGroup.Item> Calories: {value['calories']} </ListGroup.Item>\n                <ListGroup.Item> Protein: {value['Protein']} </ListGroup.Item>\n                <ListGroup.Item> Fats: {value['fat']} </ListGroup.Item>\n                <ListGroup.Item> Carbohydrates: {value['Carbohydrate']} </ListGroup.Item>\n                </ListGroup>\n            </Card.Text>\n          </Card.Body>\n        </Card>\n          )\n        })}\n  </CardDeck>\n    </Row>\n\n    <br></br>\n<Row>\n<CardDeck>\n        {list3.map((value, index) => {\n          return( \n            <Card bg=\"ligsaht\"  key={index}  text='Dark'>\n            <Card.Header>Recipe {index+7}</Card.Header>\n          <Card.Body>\n            \n            <Card.Text>\n            <Card.Title>{value['Name']}</Card.Title>\n  \n              <ListGroup variant=\"flush\">\n                <ListGroup.Item> Calories: {value['calories']} </ListGroup.Item>\n                <ListGroup.Item> Protein: {value['Protein']} </ListGroup.Item>\n                <ListGroup.Item> Fats: {value['fat']} </ListGroup.Item>\n                <ListGroup.Item> Carbohydrates: {value['Carbohydrate']} </ListGroup.Item>\n              </ListGroup>\n\n            </Card.Text>\n          </Card.Body>\n        </Card>\n          )\n        })}\n  </CardDeck>\n    </Row>\n   <br></br>\n   <center> <h3>Your Grocery List </h3> </center>  \n<Row> \n\n<Table striped bordered hover size=\"sm\">\n  <thead>\n    <tr>\n      <th>#</th>\n      <th>Ingredient</th>\n      <th>Quantity</th>\n    </tr>\n  </thead>\n  <tbody>\n        {this.state.result.ingreds.map((value,index)  => {\n          return(\n            <tr>\n            <td>{index}</td>\n            <td>{value['Name']}</td>\n            <td>{value['Quantity']}</td>\n          </tr>\n\n          )\n        })}\n\n  </tbody>\n\n  </Table>\n</Row>\n\n  </div>\n    )\n}\n\n\n\nhandlePredictClick = () => {\n    const formData = this.state.formData;\n    console.log(formData);\n    this.setState({isLoading: true });\n    fetch('http://127.0.0.1:5000/prediction/', \n      {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        method: 'POST',\n        body: JSON.stringify(formData)\n      })\n      .then(response => response.json())\n      .then(response => this.handleResponse(response));\n      \n  }\n\n  // Trigger an alert on form submission\n  handleSubmit = (event) => {\n    event.preventDefault()\n    let currentStep = this.state.currentStep\n    console.log('pressed enttered')\n    if (currentStep  == 5){\n      this.handlePredictClick()\n    }else{\n      this._next()\n    }\n    \n  }\n\n  //do this when enter is pressed \n_handleKeyDown = (e) => {\n  let currentStep = this.state.currentStep\n  if (e.key === 'Enter') {\n    if (currentStep  == 5){\n      this.handlePredictClick()\n    }else{\n      this._next()\n    }\n    \n  }\n}\n\n\n  _next = () => {\n    let currentStep = this.state.currentStep\n    currentStep = currentStep >= 4? 5: currentStep + 1\n    this.setState({\n      currentStep: currentStep\n    });\n\n  }\n    \n  _prev = () => {\n    let currentStep = this.state.currentStep\n    currentStep = currentStep <= 1? 1: currentStep - 1\n    this.setState({\n      currentStep: currentStep\n    })\n  }\n\n/*\n* the functions for our button\n*/\npreviousButton() {\n  let currentStep = this.state.currentStep;\n  if(currentStep !==1){\n    return (\n      <Button variant=\"secondary float-left\"\n       onClick={this._prev} >\n      Previous\n      </Button>\n    )\n  } \n  return null;\n}\n\nnextButton(){\n  let currentStep = this.state.currentStep;\n  if(currentStep < 5){\n    return (\n\n      <Button variant=\"primary float-right\"\n       onClick={this._next} >\n      Next\n      </Button>  \n\n    )\n  }else if(currentStep = 5){\n   return (\n    <Button variant=\"primary float-right\"\n      onClick={!this.state.isLoading ?  this.handlePredictClick: null } \n       disabled={this.state.isLoading} >\n   {this.state.isLoading ? 'Loadingâ€¦' : 'Submit '}\n   </Button> \n\n   )\n   };\n \n}\n\n\n\nrender() {\n  \n  return (\n      <React.Fragment>\n\n      <Container>\n        <div>\n          <h1 className ='title'>SMART FOOD</h1>\n        </div>\n      <div className = \"content\">\n      <Form onSubmit={this.handleSubmit}   onKeyDown={this._handleKeyDown}>\n\n      {/* \n        render the form steps and pass required props in\n      */}\n        <Step1 \n          currentStep={this.state.currentStep} \n          handleChange={this.handleChange}\n          email={this.state.formData.email}\n        />\n        <Step2 \n          formData = {this.state.formData}\n          currentStep={this.state.currentStep} \n          handleChange={this.handleChange}\n          \n        />\n        <Step3 \n          currentStep={this.state.currentStep} \n          handleChange={this.handleChange}\n          calories={this.state.formData.calories}\n          protein={this.state.formData.protein}\n          fats={this.state.formData.fats}\n          carbs={this.state.formData.carbs}\n        />\n\n        <Step4 \n          currentStep={this.state.currentStep} \n          handleChange={this.handlelist}\n          allergens={this.state.formData.allergens}\n        />    \n\n\n         <Step5\n          currentStep={this.state.currentStep} \n          handleChange={this.handlelist}\n          allergens={this.state.formData.tags}\n        />    \n    \n         {this.nextButton()}\n        {this.previousButton()}\n      </Form>\n\n\n  \n\n      \n      </div>\n    \n  \n      {/* display result */}\n   {this.state.result['recipes'].length == 0 ? null : this.showResults() }\n\n\n      </Container>\n\n      </React.Fragment>\n    );\n  }\n}\n\nfunction Step1(props) {\n  if (props.currentStep !== 1) {\n    return null\n  } \n  \n  return(\n   \n    <div className=\"form-group\">\n        <label htmlFor=\"email\">Name</label>\n        {/* <input\n          className=\"form-control\"\n          id=\"email\"\n          name=\"email\"\n          type=\"text\"\n          placeholder=\"Enter Name\"\n          value={props.name}\n          onChange={props.handleChange}\n          \n          /> */}\n            <Form.Control \n                  type=\"text\" \n                  placeholder=\"Enter Name\" \n                  name=\"email\"\n                  value={props.email}\n                  defaultValue = ''\n                  onChange={props.handleChange} />\n   </div>\n    \n  );\n}\n\n\nfunction Step2(args) {\n  const formData = args.formData;\n  if (args.currentStep !== 2) {\n    return null\n  }\n  \n  return(\n    <div className=\"form-group\">\n   <center> <h3> Hi {args.formData.email} ,<br></br> let's optimize your fridge! </h3></center>\n    </div>\n   \n  );\n\n}\n\n\nfunction Step3(props) {\n  if (props.currentStep !== 3) {\n    return null\n  } \n  return(\n    <React.Fragment>\n    {/* <div className=\"form-group\">\n      <label htmlFor=\"password\">Password</label>\n      <input\n        className=\"form-control\"\n        id=\"password\"\n        name=\"password\"\n        type=\"password\"\n        placeholder=\"Enter password\"\n        value={props.password}\n        onChange={props.handleChange}\n        />      \n    </div> */}\n\n    <Form>\n      <Form.Row>\n\n          <Form.Group as={Col}  controlId=\"formGridAddress1\">\n            <Form.Label>Calories</Form.Label>\n            <Form.Control \n                          type=\"float\" \n                          placeholder=\"Enter Calories\" \n                          name=\"calories\"\n                          value={props.calories}\n                          defaultValue = '1'\n                          onChange={props.handleChange} />\n          </Form.Group>\n\n          <Form.Group as={Col}  controlId=\"formGridAddress2\">\n              <Form.Label>Protein</Form.Label>\n              <Form.Control \n                            type=\"float\" \n                            placeholder=\"Enter Protein\" \n                            name=\"protein\"\n                            value={props.protein}\n                            defaultValue = '1'\n                            onChange={props.handleChange} />\n          </Form.Group>\n      </Form.Row>\n\n      <Form.Row>\n          <Form.Group as={Col}  controlId=\"formGridAddress4\">\n              <Form.Label>Fats</Form.Label>\n              <Form.Control \n                            type=\"float\" \n                            placeholder=\"Enter Fats\" \n                            name=\"fats\"\n                            value={props.fats}\n                            defaultValue = '1'\n                            onChange={props.handleChange} />\n          </Form.Group>\n\n          <Form.Group as={Col}  controlId=\"formGridAddress4\">\n              <Form.Label>Carbs</Form.Label>\n              <Form.Control \n                            type=\"float\" \n                            placeholder=\"Enter Carbs\" \n                            name=\"carbs\"\n                            value={props.carbs}\n                            defaultValue = '1'\n                            onChange={props.handleChange} />\n          </Form.Group>\n\n      </Form.Row>\n\n    </Form>\n      \n    </React.Fragment>\n  );\n};\n\n\n\nfunction Step4(args) {\n  const formData = args.formData;\n  if (args.currentStep !== 4) {\n    return null\n  }\n\n  const options = [\n    { value: 'Celery', label: 'Celery' },\n    { value: 'Crustaceans', label: 'Crustaceans' },\n    { value: 'Egg', label: 'Egg' },\n    { value: 'Fish', label: 'Fish' },\n    { value: 'Gluten', label: 'Gluten' },\n    { value: 'Milk', label: 'Milk' },\n    { value: 'Mustard', label: 'Mustard' },\n    { value: 'Nuts', label: 'Nuts' },\n    { value: 'Peanuts', label: 'Peanuts' },\n    { value: 'Sesame', label: 'Sesame' },\n    { value: 'Soya', label: 'Soya' },\n    { value: 'Sulphites', label: 'Sulphites' }\n  ]\n  \n  const animatedComponents = makeAnimated();\n\n  return(\n\n    <div>\n      <label htmlFor=\"allerges\">Enter any allegers that you may have!</label>\n        <Select\n        closeMenuOnSelect={false}\n        components={animatedComponents}\n        defaultValue={[options[4]]}\n        isMulti\n        options={options}\n        name = \"allergens\"\n        onChange = {args.handleChange}\n        values = {args.allergens}\n      />\n\n<br/>\n\n</div>\n);\n}\n\n\n\n\nfunction Step5(args) {\n  const formData = args.formData;\n  if (args.currentStep !== 5) {\n    return null\n  }\n\n  const options = [\n    { value: 'Spicy', label: 'Spicy' },\n    { value: 'Vegan', label: 'Vegan' },\n    { value: 'Quick', label: 'Quick' },\n    { value: 'Veggie', label: 'Veggie' },\n    { value: 'Low Salt', label: 'Low Salt' },\n    { value: 'Summer', label: 'Summer' },\n    { value: 'Quick', label: 'Quick' },\n    { value: 'Plant-based', label: 'Plant-based' },\n  \n  ]\n  \n\n  // {'Low Sat Fat', 'High Fiber', 'Equipment Needed', 'Quick', 'Rapid', 'Under 750 calories', 'Chicken', 'Dairy Free', 'Lactose Free', 'Vegan', 'Family Friendly', 'Extra spicy', 'Calorie Smart', 'Balanced', \n  // 'Family Box', 'Healthy', 'Pork', 'Veggie', 'Beef', 'Not Suitable for Coeliacs', 'Exploration', 'One Pot Wonder', 'Low Fat', 'Fish', \n  // 'Under 550 calories', \"Chef's Choice\", 'Low Salt', 'No Gluten Containing Ingredients', '\n  // Summer', 'Naturally Gluten-Free', 'Under 600 calories', 'Spicy', 'Plant-based', 'Eat First', 'Salad'}\n\n  const animatedComponents = makeAnimated();\n  return(\n\n    <div>\n        <label htmlFor=\"allerges\">Any thing else you want in your recipes!</label>\n        <Select\n        closeMenuOnSelect={false}\n        components={animatedComponents}\n        defaultValue={[options[0]]}\n        isMulti\n        options={options}\n        name = \"allergens\"\n        onChange = {args.handleChange}\n        values = {args.tags}\n      />\n\n<br/>\n\n</div>\n);\n}\n\n\n\nexport default MasterForm;\n\n//ReactDOM.render(<MasterForm />, document.getElementById('root'))\n","C:\\Users\\tecti\\Desktop\\front end\\test\\frontend\\src\\reportWebVitals.js",[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":1,"column":17,"nodeType":"42","messageId":"43","endLine":1,"endColumn":26},{"ruleId":"40","severity":1,"message":"44","line":1,"column":29,"nodeType":"42","messageId":"43","endLine":1,"endColumn":37},{"ruleId":"40","severity":1,"message":"45","line":9,"column":8,"nodeType":"42","messageId":"43","endLine":9,"endColumn":13},{"ruleId":"40","severity":1,"message":"46","line":14,"column":8,"nodeType":"42","messageId":"43","endLine":14,"endColumn":17},{"ruleId":"40","severity":1,"message":"47","line":16,"column":8,"nodeType":"42","messageId":"43","endLine":16,"endColumn":20},{"ruleId":"40","severity":1,"message":"48","line":17,"column":10,"nodeType":"42","messageId":"43","endLine":17,"endColumn":22},{"ruleId":"49","severity":1,"message":"50","line":61,"column":22,"nodeType":"51","messageId":"52","endLine":61,"endColumn":24},{"ruleId":"53","severity":1,"message":"54","line":62,"column":7,"nodeType":"55","endLine":62,"endColumn":26},{"ruleId":"49","severity":1,"message":"50","line":63,"column":27,"nodeType":"51","messageId":"52","endLine":63,"endColumn":29},{"ruleId":"53","severity":1,"message":"54","line":64,"column":7,"nodeType":"55","endLine":64,"endColumn":26},{"ruleId":"40","severity":1,"message":"56","line":72,"column":9,"nodeType":"42","messageId":"43","endLine":72,"endColumn":15},{"ruleId":"49","severity":1,"message":"50","line":249,"column":22,"nodeType":"51","messageId":"52","endLine":249,"endColumn":24},{"ruleId":"49","severity":1,"message":"50","line":261,"column":22,"nodeType":"51","messageId":"52","endLine":261,"endColumn":24},{"ruleId":"57","severity":1,"message":"58","line":315,"column":12,"nodeType":"59","messageId":"60","endLine":315,"endColumn":27},{"ruleId":"49","severity":1,"message":"50","line":390,"column":41,"nodeType":"51","messageId":"52","endLine":390,"endColumn":43},{"ruleId":"40","severity":1,"message":"61","line":433,"column":9,"nodeType":"42","messageId":"43","endLine":433,"endColumn":17},{"ruleId":"40","severity":1,"message":"61","line":527,"column":9,"nodeType":"42","messageId":"43","endLine":527,"endColumn":17},{"ruleId":"40","severity":1,"message":"61","line":574,"column":9,"nodeType":"42","messageId":"43","endLine":574,"endColumn":17},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Modal' is defined but never used.","'CardGroup' is defined but never used.","'ToggleButton' is defined but never used.","'ControlLabel' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'target' is assigned a value but never used.","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","'formData' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]